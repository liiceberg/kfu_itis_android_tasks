package ru.kpfu.itis.gimaletdinova.kfu_itis_android_tasks

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import ru.kpfu.itis.gimaletdinova.kfu_itis_android_tasks.databinding.ActivityMainBinding
import ru.kpfu.itis.gimaletdinova.kfu_itis_android_tasks.ui.fragments.StartScreenFragment

class MainActivity : AppCompatActivity() {

    private var binding: ActivityMainBinding? = null
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        binding = ActivityMainBinding.inflate(layoutInflater).also {
            setContentView(it.root)
        }

        supportFragmentManager.beginTransaction()
            .add(R.id.container, StartScreenFragment())
            .commit()
    }

    override fun onDestroy() {
        binding = null
        super.onDestroy()
    }
}
/*
> Android – 2 курс – 23/24:
Домашнее задание №3 - Recycler View + DiffUtils
Дедлайн: 02.11 (100%), 09.11 (50%)

Обязательная часть:
Реализовать приложение новостную ленту/галерею (или что-то в подобном ключе на ваше усмотрение. Я ниже буду говорить об элементах как о новостях, но это может быть все, что угодно)

Описание UI-элементов
- Стартовый экран - поле для ввода текста и кнопка
- Экран с лентой новостей - здесь будет один recycler view и кнопка. Элемент ресайкл вью содержит заголовок и картинку (либо просто картинку, если реализуется что-то в духе галереи). Так же на элементе есть кнопка добавления в избранное
- Боттом шит - поле для ввода текста и кнопка
- Экран с детальной информацией - текстовое поле заголовка, image view, текстовое поле для детальной информации

Описание логики работы приложения:

Стартовый экран:
- Текстовое поле принимает только числа, в него вводится количество новостей, которое будет отображено в ленте на следующем экране (максимум 45)
- По нажатию на кнопку переходить на следующий экран. Количество новостей может быть 0 (предусмотреть этот вариант на экране с лентой)

Экран с лентой новостей:
- В верхней части страницы отображается кнопка на всю ширину экрана. По нажатию на кнопку открывается боттом шит. Кнопка скроллится вместе с RecyclerView

- Отображение элементов в RecyclerView зависит от количества элементов, которое было введено на стартовом экране. Если элементов <=12 - отображать все вертикальным списком, если больше 12 - сеткой из 2 столбцов.

- Каждые 8 элементов должны отделяться между собой датой. Как это работает:
-- На вход пришло 20 новостей, значит есть 3 группы - 8 новостей + 8 новостей + 4 новости. Сетка выглядит так:
---> Кнопка - Дата - Блок из 8 новостей - Дата - Блок из 8 новостей - Дата - Блок из 4 новостей
-- На вход пришло 11 новостей, 2 группы - 8 новостей + 3 новости. Лента выглядит так
---> Кнопка - Дата - Блок из 8 новостей - Дата - Блок из 3 новостей

- Каждый элемент ленты содержит в себе кнопку-иконку добавления в избранное. По нажатию на эту иконку - перекрашивать цвет иконки (либо менять иконку на другую) и обратно при повторном нажатии. При переходе на экран с детальной информацией и возвращении обратно, сохранять стейт избранных новостей.

- По нажатию на элемент ресайкл вью - открывать экран с детальной информацией.

Экран с детальной информацией:
- В заголовке отображаете название новости, в качестве картинки - увеличенную версию картинки из ленты, в описании - детальное описание новости

Боттом шит (открывается после нажатия кнопки на экране ленты):
- В текстовое поле можно ввести только число, которое отвечает за количество новостей, которое будет добавлено в ленту (максимум 5)
- После нажатия на кнопку, добавить указанное количество новостей на случайные позиции в ленте новостей. Здесь логику с пачками по 8 новостей можно сломать (т.е. может быть такое, что блоки станут Дата - 10 новостей - Дата - 8 новостей - Дата - 6 новостей)

Опциональная часть:
1) Реализовать логику удаления элементов
-- Если новостей <=12 и используется вертикальная лента - использовать свайп влево для удаления (свайп вправо реализовывать не нужно). Элемент считается удаленным, если пользователь оттянул элемент влево на 50% и более по ширине.
-- Если новостей >12 - тогда использовать долгое нажатие. После долгого нажатия на элементе сетки появляется значок корзины, после повторного долгого нажатия - скрывается. По нажатию на корзину - удалять элемент

После удаления элемента некоторое время показывать Snackbar с кнопкой "Отменить удаление". По нажатию на кнопку - вернуть удаленный элемент в список.

2) Реализовать анимацию перехода от элемента ленты к детальной новости как на анимации (см. сообщение ниже)

Не обязательно выполнять оба опциональных задания, можно выбрать одно (но если сделаете оба - больше баллов)

Ограничения: использовать только стандартные средства андроида без сторонних библиотек. Из библиотек допускаются только Glide/Coil (если не хотите тащить картинки локально в проект) и ViewBinding Delegate.

> Android – 2 курс – 23/24:
Что должно быть на скринкасте (единым видео без деления на части):
- На стартовом экране ввести 12, перейти к ленте новостей. Добавить первую новость в избранное, пролистать до конца вниз, вернуться наверх. Нажать на одну из новостей, показать экран детальной информации. Вернуться на экран с лентой, вернуться на стартовый экран
- На стартовом экране ввести 39, перейти к ленте новостей. Пролистать все новости вниз, по пути добавить 3-4 новости в избранное. Пролистать все вверх, открыть одну из новостей, вернуться обратно.
- Нажать на кнопку в верхней части. Добавить 5 новостей. Снова пролистать сетку новостей вниз

- Для опциональной части с удалением - в первом сценарии с 12 элементами, в конце перед возращением на стартовый экран, удалить пару элементов свайпом влево, один из них вернуть. Во втором сценарии удалить пару элементов через долгое нажатие.

- Для опциональной части с анимацией перехода - результат будет виден на шаге перехода к экрану с детальной информацией

 */